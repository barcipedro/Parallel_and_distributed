#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

#define TAG 0

void exchangeVectors(double *vector, int size, int numExchanges, int rank) {
    int i;

    for (i = 0; i < numExchanges; ++i) {
        if (rank == 0) {
            // Processo 0 troca o valor para 2.0
            for (int j = 0; j < size; ++j) {
                vector[j] = 2.0;
            }
            printf("Troca %d: Processo 0 localmente trocou vetor para 2.0\n", i + 1);
            MPI_Send(vector, size, MPI_DOUBLE, 1, TAG, MPI_COMM_WORLD);
            MPI_Recv(vector, size, MPI_DOUBLE, 1, TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            printf("Troca %d: Processo 0 enviou vetor para Processo 1\n", i + 1);
        } else {
            MPI_Recv(vector, size, MPI_DOUBLE, 0, TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            // Processo 1 troca o valor para 4.0
            for (int j = 0; j < size; ++j) {
                vector[j] = 4.0;
            }
            printf("Troca %d: Processo 1 localmente trocou vetor para 4.0\n", i + 1);
            MPI_Send(vector, size, MPI_DOUBLE, 0, TAG, MPI_COMM_WORLD);
            printf("Troca %d: Processo 1 enviou vetor para Processo 0\n", i + 1);
        }
    }
}

int main(int argc, char *argv[]) {
    int rank, size, vectorSize, numExchanges;
    double *vector;
    double start, end;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (argc < 3) {
        if (rank == 0) {
            printf("Uso: %s <tamanho_do_vetor> <trocas_entre_processos>\n", argv[0]);
        }
        MPI_Finalize();
        return 1;
    }

    if (rank == 0) {
        vectorSize = atoi(argv[1]);
        numExchanges = atoi(argv[2]);
        MPI_Send(&vectorSize, 1, MPI_INT, 1, TAG, MPI_COMM_WORLD);
        MPI_Send(&numExchanges, 1, MPI_INT, 1, TAG, MPI_COMM_WORLD);
    } else {
        MPI_Recv(&vectorSize, 1, MPI_INT, 0, TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        MPI_Recv(&numExchanges, 1, MPI_INT, 0, TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    }

    vector = (double *)malloc(vectorSize * sizeof(double));
    for (int i = 0; i < vectorSize; ++i) {
        vector[i] = -1.0;
    }

    start = MPI_Wtime();

    exchangeVectors(vector, vectorSize, numExchanges, rank);

    end = MPI_Wtime();

    if (rank == 0) {
        printf("Tempo gasto para trocar vetores: %f segundos\n", end - start);
    }

    free(vector);

    MPI_Finalize();
    return 0;
}


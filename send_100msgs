/* Inclusao de bibliotecas */
#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

/* Definicao de constantes */
#define MASTER 0
#define NUM_MESSAGES 100

void main(int argc, char *argv[]) {
    int numtasks, rank, dest, source, count, tag = 1;
    int inmsg, i;
    MPI_Status Stat;
    FILE *pt_a; // ponteiro para arquivo de sa√≠da

    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &numtasks);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    if (argc < 2) {
        printf("Uso: %s <arquivo_saida>\n", argv[0]);
        MPI_Abort(MPI_COMM_WORLD, 1);
    }

    // abrir arquivo de saida
    if (rank == MASTER && (pt_a = fopen(argv[1], "w")) == NULL) {
        printf("Erro na abertura do arquivo \n");
        exit(1);
    }

    if (rank != MASTER) {
        for (i = 0; i < NUM_MESSAGES; ++i) {
            MPI_Send(&rank, 1, MPI_INT, MASTER, tag, MPI_COMM_WORLD);
        }
    } else {
        for (i = 0; i < NUM_MESSAGES * (numtasks - 1); ++i) {
            MPI_Recv(&inmsg, 1, MPI_INT, MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &Stat);
            fprintf(pt_a, "Indentificacao =%d valor =%d \n", Stat.MPI_SOURCE, inmsg);
        }
        fclose(pt_a);
    }

    MPI_Finalize();
}

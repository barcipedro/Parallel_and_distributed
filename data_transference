/* Inclusao de bibliotecas */
#include<stdio.h>
#include<stdlib.h>
#include<mpi.h>

/* Deficao de constantes */
#define MASTER 0

//mpicc -o nomeexec hwmpi.c
//mpirun -n 4 ./nomeexec 12(PARAMETRO) output.txt
void main (int argc, char* argv[]){

int numtasks, rank, dest, source, count, tag=1; 
int inmsg, i;
MPI_Status Stat;
int var; // parametro 1 da linha de comando - inteiro
FILE *pt_a; // ponteiro para arquivo de sa√≠da

MPI_Init(&argc,&argv);
MPI_Comm_size(MPI_COMM_WORLD, &numtasks);
MPI_Comm_rank(MPI_COMM_WORLD, &rank);


if (rank == MASTER) {
// Le parametro de entrada 
var = atoi(argv[1]); 
// abrir arquivo de saida
if ((pt_a = fopen (argv[2], "w")) == NULL) {
printf ("Erro na abertura do arquivo \n");
exit(1);
}
var = var + rank;
fprintf (pt_a, "Indentificacao =%d valor =%d \n", rank, var);
// envia valor para o rank+1
dest = rank+1;
MPI_Send(&var, 1, MPI_INT, dest, 1, MPI_COMM_WORLD);

for (i = 1; i < numtasks; ++i){
MPI_Recv(&inmsg, 1, MPI_INT, i, 1, MPI_COMM_WORLD, &Stat);
fprintf (pt_a, "Indentificacao =%d valor =%d \n", Stat.MPI_SOURCE, inmsg);
}

fclose(pt_a);

}else {

if(rank != numtasks-1){
dest = rank+1; // manda para master
source = rank-1; // recebe da ant
MPI_Recv(&inmsg, 1, MPI_INT, source,1, MPI_COMM_WORLD, &Stat);
inmsg += rank;
/* manda para post */
MPI_Send(&inmsg, 1, MPI_INT, dest, 1, MPI_COMM_WORLD);
/* manda para MASTER */
MPI_Send(&inmsg, 1, MPI_INT, MASTER, 1, MPI_COMM_WORLD);
}else{
source = rank-1; // recebe da ant
MPI_Recv(&inmsg, 1, MPI_INT, source,1, MPI_COMM_WORLD, &Stat);
inmsg += rank;
MPI_Send(&inmsg, 1, MPI_INT, MASTER, 1, MPI_COMM_WORLD);
} 
}

MPI_Finalize();
}
